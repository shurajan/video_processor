from .base import ProcessingStage
import subprocess
import logging

logger = logging.getLogger(__name__)

class KeyframeGenerationStage(ProcessingStage):
    @property
    def name(self) -> str:
        return "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤"

    def execute(self, video_info, context: dict) -> dict:
        for output_dir in context['output_dirs']:
            segments = output_dir / 'segments'
            keyframes = output_dir / 'keyframes'
            for segment in segments.glob('*.ts'):
                num = segment.stem
                out = keyframes / f"{num}.jpg"
                cmd = [
                    'ffmpeg', '-v', 'error', '-y', '-i', str(segment),
                    '-frames:v', '1', '-q:v', '2', str(out)
                ]
                try:
                    subprocess.run(cmd, check=True, capture_output=True)
                    logger.info(f"üñºÔ∏è –ö–ª—é—á–µ–≤–æ–π –∫–∞–¥—Ä {num}.jpg —Å–æ–∑–¥–∞–Ω")
                except subprocess.CalledProcessError as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–¥—Ä –¥–ª—è {segment}: {e}")
        return context
