from .base import ProcessingStage
import subprocess
import logging

logger = logging.getLogger(__name__)

class FixCorruptedStage(ProcessingStage):
    @property
    def name(self) -> str:
        return "–§–∏–∫—Å–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ .ts —Ñ–∞–π–ª–∞"

    def execute(self, video_info, context: dict) -> dict:
        input_path = video_info.input_path
        fixed_path = input_path.with_name(f"{input_path.stem}_fixed{input_path.suffix}")

        logger.info(f"üõ†Ô∏è {self.name}: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫")

        cmd = [
            "ffmpeg", "-y",
            "-fflags", "+genpts",
            "-i", str(input_path),
            "-c:v", "copy", "-c:a", "copy",
            str(fixed_path)
        ]

        try:
            subprocess.run(cmd, check=True, capture_output=True)
        except subprocess.CalledProcessError as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ .ts —Ñ–∞–π–ª–∞: {e.stderr.decode()}")

        try:
            input_path.unlink()
            fixed_path.rename(input_path)
            logger.info(f"‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω–∏–ª –æ—Ä–∏–≥–∏–Ω–∞–ª: {input_path}")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

        return context